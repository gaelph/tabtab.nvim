*tabtab.txt*  A Neovim plugin for AI code suggestions

==============================================================================
CONTENTS                                                     *tabtab-contents*

    1. Introduction ........................... |tabtab-introduction|
    2. Installation ........................... |tabtab-installation|
    3. Usage .................................. |tabtab-usage|
    4. Configuration .......................... |tabtab-configuration|
    5. Commands ............................... |tabtab-commands|
    6. License ................................ |tabtab-license|

==============================================================================
1. INTRODUCTION                                          *tabtab-introduction*

tabtab.nvim brings the power of AI code suggestions directly into your Neovim
workflow. Inspired by modern AI-powered editors like Cursor and Zed, tabtab.nvim
provides intelligent, context-aware code completions that help you write better
code faster.

Features:
- Intelligent Code Suggestions: Get contextually relevant code completions as
  you type
- Tab-Through Experience: Accept suggestions with a simple key press, similar
  to Cursor and Zed editors
- Scope-Aware: Understands your code context to provide more accurate
  suggestions
- Diagnostic Integration: Uses your code diagnostics to improve suggestion
  quality
- Multiple LLM Providers: Support for various AI backends including OpenAI,
  RunPod, and Alter
- Minimal UI: Non-intrusive interface that stays out of your way until you
  need it

Requirements:
- Neovim >= 0.10.0
- An API key for your chosen LLM provider (OpenAI, Groq, etc.)

==============================================================================
2. INSTALLATION                                          *tabtab-installation*

Using packer.nvim:
>
    use {
        'gaelph/tabtab.nvim',
        config = function()
            require('tabtab').setup({
                client = {
                    provider = "openai",  -- or "tabtab", "runpod", "alter"
                    api_key = os.getenv("GROQ_API_KEY"),  -- or your preferred API key
                    api_base = "https://api.groq.com/openai",  -- adjust based on provider
                    defaults = {
                        model = "qwen-2.5-coder-32b",  -- recommended for performance
                        temperature = 0.3,
                        max_tokens = 4096,
                    }
                }
            })
        end
    }
<

Using lazy.nvim:
>
    {
        'gaelph/tabtab.nvim',
        config = function()
            require('tabtab').setup({
                client = {
                    provider = "openai",  -- or "tabtab", "runpod", "alter"
                    api_key = os.getenv("GROQ_API_KEY"),  -- or your preferred API key
                    api_base = "https://api.groq.com/openai",  -- adjust based on provider
                    defaults = {
                        model = "qwen-2.5-coder-32b",  -- recommended for performance
                        temperature = 0.3,
                        max_tokens = 4096,
                    }
                }
            })
        end
    }
<

==============================================================================
3. USAGE                                                       *tabtab-usage*

tabtab.nvim works by analyzing your code context and offering intelligent
suggestions as you type:

1. Write code as you normally would
2. When tabtab detects an opportunity for a suggestion, it will offer a
   completion
3. Press Alt+Tab (default keybinding) to jump to a suggestion
4. Use Alt+Tab to accept the suggestion, or Esc to reject it

Recommended Models:
- Zeta model by Zed Industries: Great balance of quality and speed
- Qwen 2.5 Coder 32B from Groq: Higher capability with good performance

How It Works:
tabtab.nvim tracks your cursor position and code context to understand what
you're working on. When you trigger a suggestion (Alt+Tab by default), it:

1. Captures your current code scope
2. Analyzes recent changes and diagnostics
3. Sends this context to the configured LLM
4. Processes the LLM's response into applicable code hunks
5. Presents suggestions that you can accept with Tab

This approach allows for contextually relevant suggestions that understand both
your immediate code and the broader project structure.

==============================================================================
4. CONFIGURATION                                        *tabtab-configuration*

tabtab.nvim comes with the following default configuration:
>
    require('tabtab').setup({
        -- LLM client configuration
        client = {
            -- Provider to use: "openai", "tabtab", "runpod", or "alter"
            provider = "openai",

            -- API key (defaults to GROQ_API_KEY environment variable)
            api_key = os.getenv("GROQ_API_KEY"),

            -- API base URL
            api_base = "https://api.groq.com/openai",

            -- Default parameters for completions
            defaults = {
                -- Model to use for completions
                model = "qwen-2.5-coder-32b",

                -- Temperature for generation (0.0 to 1.0)
                temperature = 0.3,

                -- Maximum tokens to generate
                max_tokens = 4096,
            },
        },

        -- Cursor tracking configuration
        cursor = {
            -- Filetypes to exclude from cursor tracking
            exclude_filetypes = {
                "TelescopePrompt",
                "neo-tree",
                "NvimTree",
                "lazy",
                "mason",
                "help",
                "quickfix",
                "terminal",
                "Avante",
                "AvanteInput",
                "AvanteSelectedFiles",
                "diffview",
                "NeogitStatus",
            },

            -- Buffer types to exclude from cursor tracking
            exclude_buftypes = {
                "terminal",
            },
        },

	-- Keymaps configuration
	keymaps = {
		accept_or_jump = "<M-Tab>", -- Example keymap for accepting or jumping to the next change
		reject = "<Esc>", -- Example keymap for rejecting a change
	},

        -- Maximum number of changes to keep in history
        history_size = 10,
    })
<

==============================================================================
5. COMMANDS                                                 *tabtab-commands*

Currently, tabtab.nvim is primarily controlled through keybindings rather than
explicit commands. The default keybinding is Alt+Tab to jump to a suggestion,
and to accept them.

==============================================================================
6. LICENSE                                                  *tabtab-license*

See LICENSE file in the repository.

 vim:tw=78:ts=8:ft=help:norl:
